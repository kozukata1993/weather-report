rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAnyAuthenticated() {
      return request.auth != null;
    }

    function isUserAuthenticated(userID) {
      return isAnyAuthenticated() && userID == request.auth.uid;
    }

    match /cities/{city}/forecast/{forecast} {
      allow read: if true;
      allow write: if false;
    }

    match /users/{userID} {
      allow read, write: if isUserAuthenticated(userID)
    }

    match /users/{userID}/notice/{noticeID} {
      allow read, write: if isUserAuthenticated(userID)

      allow create: if isUserAuthenticated(userID)
        && 'city' in request.resource.data
        && 'time' in request.resource.data
        && 'webhookUrl' in request.resource.data
        && request.resource.data.city is string
        && request.resource.data.time is number
        && request.resource.data.webhookUrl is string
        && request.resource.data.createdAt == request.time

      allow update: if isUserAuthenticated(userID)
        && 'city' in request.resource.data
        && 'time' in request.resource.data
        && 'webhookUrl' in request.resource.data
        && request.resource.data.city is string
        && request.resource.data.time is number
        && request.resource.data.webhookUrl is string

      allow delete: if isUserAuthenticated(userID)
    }
  }
}
